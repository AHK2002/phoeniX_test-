$date
	Sat Sep 02 11:31:31 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Fetch_Testbench $end
$var wire 32 ! next_PC [31:0] $end
$var wire 1 " memory_state_Imem $end
$var wire 4 # frame_mask_Imem [3:0] $end
$var wire 1 $ enable_Imem $end
$var wire 32 % address_Imem [31:0] $end
$var parameter 1 & READ $end
$var parameter 32 ' RESET_ADDRESS $end
$var parameter 1 ( WRITE $end
$var reg 1 ) CLK $end
$var reg 32 * PC [31:0] $end
$var reg 32 + address [31:0] $end
$var reg 32 , data_in_Imem [31:0] $end
$var reg 1 - enable $end
$var reg 32 . instruction [31:0] $end
$var reg 1 / jump_branch_enable $end
$var reg 1 0 reset $end
$scope module uut $end
$var wire 32 1 PC [31:0] $end
$var wire 32 2 address [31:0] $end
$var wire 1 - enable $end
$var wire 1 / jump_branch_enable $end
$var parameter 1 3 READ $end
$var parameter 1 4 WRITE $end
$var reg 32 5 memory_interface_address [31:0] $end
$var reg 1 $ memory_interface_enable $end
$var reg 4 6 memory_interface_frame_mask [3:0] $end
$var reg 1 " memory_interface_state $end
$var reg 32 7 next_PC [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
14
03
1(
b11111111111111111111111111111100 '
0&
$end
#0
$dumpvars
bx 7
b1111 6
bx 5
bx 2
bx 1
10
0/
bx .
0-
bx ,
bx +
bx *
1)
bx %
0$
b1111 #
0"
bx !
$end
#6
bz ,
0)
#12
b0 !
b0 7
b11111111111111111111111111111100 %
b11111111111111111111111111111100 5
bz .
b11111111111111111111111111111100 *
b11111111111111111111111111111100 1
1)
#18
0)
#24
1)
#30
0)
#36
b100 !
b100 7
b0 %
b0 5
b0 *
b0 1
1$
1-
00
1)
#42
b11111101000000010000000100010011 ,
0)
#48
b1000 !
b1000 7
b100 %
b100 5
b100 *
b100 1
b11111101000000010000000100010011 .
1)
#54
b10100000010010011000100011 ,
0)
#60
b1100 !
b1100 7
b1000 %
b1000 5
b10100000010010011000100011 .
b1000 *
b1000 1
1)
#66
b11000000010000010000010011 ,
0)
#72
b10000 !
b10000 7
b1100 %
b1100 5
b1100 *
b1100 1
b11000000010000010000010011 .
1)
#78
b11111110000001000010011000100011 ,
0)
#84
b10100 !
b10100 7
b10000 %
b10000 5
b11111110000001000010011000100011 .
b10000 *
b10000 1
1)
#90
b100000000011110010011 ,
0)
#96
b10100 %
b10100 5
b0 !
b0 7
b10100 *
b10100 1
b100000000011110010011 .
1/
b0 +
b0 2
1)
#102
b11111110111101000010010000100011 ,
0)
#108
b0 %
b0 5
b11111110111101000010010000100011 .
b0 *
b0 1
b100 !
b100 7
1)
0/
#114
b11111101000000010000000100010011 ,
0)
#120
b1000 !
b1000 7
b100 %
b100 5
b100 *
b100 1
b11111101000000010000000100010011 .
1)
#126
b10100000010010011000100011 ,
0)
#132
b1100 !
b1100 7
b1000 %
b1000 5
b10100000010010011000100011 .
b1000 *
b1000 1
1)
#138
b11000000010000010000010011 ,
0)
#144
b10000 !
b10000 7
b1100 %
b1100 5
b1100 *
b1100 1
b11000000010000010000010011 .
1)
#150
b11111110000001000010011000100011 ,
0)
#156
b10100 !
b10100 7
b10000 %
b10000 5
b11111110000001000010011000100011 .
b10000 *
b10000 1
1)
#162
b100000000011110010011 ,
0)
#168
b11000 !
b11000 7
b10100 %
b10100 5
b10100 *
b10100 1
b100000000011110010011 .
1)
#174
b11111110111101000010010000100011 ,
0)
#180
b11100 !
b11100 7
b11000 %
b11000 5
b11111110111101000010010000100011 .
b11000 *
b11000 1
1)
#186
b101000000000011110010011 ,
0)
#192
b100000 !
b100000 7
b11100 %
b11100 5
b11100 *
b11100 1
b101000000000011110010011 .
1)
#198
b11111110111101000010000000100011 ,
0)
#204
b100100 !
b100100 7
b100000 %
b100000 5
b11111110111101000010000000100011 .
b100000 *
b100000 1
1)
#208
