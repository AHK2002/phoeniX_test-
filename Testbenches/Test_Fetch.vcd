$date
	Sun Aug 20 13:22:27 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TB_Fetch $end
$var wire 32 ! next_PC [31:0] $end
$var wire 32 " latched_instruction [31:0] $end
$var parameter 32 # RESET_ADDRESS $end
$var reg 1 $ CLK $end
$var reg 1 % CLK_MEM $end
$var reg 32 & PC [31:0] $end
$var reg 32 ' address_generated [31:0] $end
$var reg 1 ( enable $end
$var reg 32 ) instruction [31:0] $end
$var reg 1 * jump_branch_enable $end
$var reg 1 + reset $end
$scope module uut $end
$var wire 1 % CLK $end
$var wire 32 , PC [31:0] $end
$var wire 32 - address [31:0] $end
$var wire 1 . enable $end
$var wire 1 * jump_branch_enable $end
$var wire 32 / next_PC [31:0] $end
$var wire 32 0 fetched_instruction_wire [31:0] $end
$var wire 1 1 fetch_done $end
$var reg 32 2 fetched_instruction [31:0] $end
$scope module instruction_memory $end
$var wire 1 % CLK $end
$var wire 32 3 address [31:0] $end
$var wire 32 4 data [31:0] $end
$var wire 1 . enable $end
$var wire 4 5 frame_mask [3:0] $end
$var wire 1 6 memory_state $end
$var parameter 4 7 B_0001 $end
$var parameter 4 8 B_0010 $end
$var parameter 4 9 B_0100 $end
$var parameter 4 : B_1000 $end
$var parameter 4 ; FINISH $end
$var parameter 4 < H_0011_1 $end
$var parameter 4 = H_0011_2 $end
$var parameter 4 > H_1100_1 $end
$var parameter 4 ? H_1100_2 $end
$var parameter 1 @ READ $end
$var parameter 4 A STABLE $end
$var parameter 1 B WRITE $end
$var parameter 4 C W_1111_1 $end
$var parameter 4 D W_1111_2 $end
$var parameter 4 E W_1111_3 $end
$var parameter 4 F W_1111_4 $end
$var reg 32 G data_in [31:0] $end
$var reg 1 1 memory_done $end
$var reg 4 H next_state [3:0] $end
$var reg 4 I state [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1100 F
b1011 E
b1010 D
b1001 C
1B
b0 A
0@
b1000 ?
b111 >
b110 =
b101 <
b1101 ;
b100 :
b11 9
b10 8
b1 7
b11111111111111111111111111111100 #
$end
#0
$dumpvars
bx I
bx H
bx G
06
b1111 5
bx 4
bx 3
bx 2
x1
bx 0
bx /
1.
bx -
bx ,
1+
0*
bx )
0(
bx '
bx &
1%
1$
bx "
bx !
$end
#1
0%
#2
1%
#3
0%
#4
1%
#5
0%
#6
1%
0$
#7
0%
#8
1%
#9
0%
#10
1%
#11
0%
#12
b0 !
b0 /
b11111111111111111111111111111100 &
b11111111111111111111111111111100 ,
b11111111111111111111111111111100 3
1%
1$
#13
0%
#14
1%
#15
0%
#16
1%
#17
0%
#18
1%
0$
#19
0%
#20
1%
#21
0%
#22
1%
#23
0%
#24
1%
1$
#25
0%
#26
1%
1(
0+
#27
0%
#28
1%
#29
0%
#30
1%
0$
#31
0%
#32
1%
#33
0%
#34
1%
#35
0%
#36
b100 !
b100 /
b0 &
b0 ,
b0 3
1%
1$
#37
0%
#38
1%
#39
0%
#40
1%
#41
0%
#42
1%
0$
#43
0%
#44
1%
#45
0%
#46
1%
#47
0%
#48
b1000 !
b1000 /
b100 &
b100 ,
b100 3
1%
1$
#49
0%
#50
1%
#51
0%
#52
1%
#53
0%
#54
1%
0$
#55
0%
#56
1%
#57
0%
#58
1%
#59
0%
#60
b1100 !
b1100 /
b1000 &
b1000 ,
b1000 3
1%
1$
#61
0%
#62
b0 !
b0 /
1%
1*
b0 '
b0 -
#63
0%
#64
1%
#65
0%
#66
1%
0$
#67
0%
#68
1%
#69
0%
#70
1%
#71
0%
#72
b0 &
b0 ,
b0 3
1%
1$
#73
0%
#74
b100 !
b100 /
1%
0*
#75
0%
#76
1%
#77
0%
#78
1%
0$
#79
0%
#80
1%
#81
0%
#82
1%
#83
0%
#84
b1000 !
b1000 /
b100 &
b100 ,
b100 3
1%
1$
#85
0%
#86
1%
#87
0%
#88
1%
#89
0%
#90
1%
0$
#91
0%
#92
1%
#93
0%
#94
1%
#95
0%
#96
b1100 !
b1100 /
b1000 &
b1000 ,
b1000 3
1%
1$
#97
0%
#98
1%
#99
0%
#100
1%
#101
0%
#102
1%
0$
#103
0%
#104
1%
#105
0%
#106
1%
#107
0%
#108
b10000 !
b10000 /
b1100 &
b1100 ,
b1100 3
1%
1$
#109
0%
#110
1%
#111
0%
#112
1%
#113
0%
#114
1%
0$
#115
0%
#116
1%
#117
0%
#118
1%
#119
0%
#120
b10100 !
b10100 /
b10000 &
b10000 ,
b10000 3
1%
1$
#121
0%
#122
1%
#123
0%
#124
1%
#125
0%
#126
1%
0$
#127
0%
#128
1%
#129
0%
#130
1%
#131
0%
#132
b11000 !
b11000 /
b10100 &
b10100 ,
b10100 3
1%
1$
#133
0%
#134
1%
#135
0%
#136
1%
#137
0%
#138
1%
0$
#139
0%
#140
1%
#141
0%
#142
1%
#143
0%
#144
b11100 !
b11100 /
b11000 &
b11000 ,
b11000 3
1%
1$
#145
0%
#146
1%
#147
0%
#148
1%
#149
0%
#150
1%
0$
#151
0%
#152
1%
#153
0%
#154
1%
#155
0%
#156
b100000 !
b100000 /
b11100 &
b11100 ,
b11100 3
1%
1$
#157
0%
#158
1%
#159
0%
#160
1%
#161
0%
#162
1%
0$
#163
0%
#164
1%
#165
0%
#166
1%
#167
0%
#168
b100100 !
b100100 /
b100000 &
b100000 ,
b100000 3
1%
1$
#169
0%
#170
1%
#171
0%
#172
1%
#173
0%
#174
1%
0$
