$date
	Wed Aug 09 20:09:47 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TB_Fetch $end
$var wire 32 ! instruction [31:0] $end
$var wire 32 " PC [31:0] $end
$var reg 1 # CLK $end
$var reg 1 $ Reset $end
$var reg 1 % branch_signal $end
$var reg 32 & immediate [31:0] $end
$scope module Fetch_Circuit $end
$var wire 1 # CLK $end
$var wire 1 $ Reset $end
$var wire 1 % branch_signal $end
$var wire 1 ' enable $end
$var wire 32 ( immediate [31:0] $end
$var wire 32 ) next_PC [31:0] $end
$var wire 32 * instruction [31:0] $end
$var wire 32 + branch_target [31:0] $end
$var wire 32 , PC_register_input [31:0] $end
$var wire 32 - PC [31:0] $end
$scope module instruction_memory $end
$var wire 32 . address [31:0] $end
$var wire 1 # clk $end
$var wire 32 / dataIn [31:0] $end
$var wire 1 0 enable $end
$var wire 1 1 read_enable $end
$var wire 1 $ reset $end
$var wire 1 2 write_enable $end
$var reg 32 3 dataOut [31:0] $end
$upscope $end
$scope module pc_register $end
$var wire 1 # CLK $end
$var wire 1 ' enable $end
$var wire 32 4 register_input [31:0] $end
$var reg 32 5 register_output [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 6 i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx 6
bx 5
b11111111111111111111111111111100 4
b0 3
02
11
10
b0 /
bx .
bx -
b11111111111111111111111111111100 ,
bx +
b0 *
bx )
bx (
z'
bx &
x%
1$
0#
bx "
b0 !
$end
#1
1#
#2
0#
#3
1#
#4
0#
#5
1#
#6
0#
#7
1#
#8
0#
#9
1#
#10
bx ,
bx 4
0#
b11001 &
b11001 (
0%
0$
#11
1#
#12
0#
#13
1#
#14
0#
#15
1#
#16
0#
#17
1#
#18
0#
#19
1#
#20
0#
#21
1#
#22
0#
#23
1#
#24
0#
#25
1#
#26
0#
#27
1#
#28
0#
#29
1#
#30
0#
b10100 6
#31
1#
#32
0#
#33
1#
#34
0#
#35
1#
#36
0#
#37
1#
#38
0#
#39
1#
#40
0#
#41
1#
#42
0#
#43
1#
#44
0#
#45
1#
#46
0#
#47
1#
#48
0#
#49
1#
#50
0#
