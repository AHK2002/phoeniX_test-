$date
	Sun Oct 15 21:31:35 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Multiplier_Unit_TB $end
$var wire 1 ! mul_unit_busy $end
$var wire 32 " mul_output [31:0] $end
$var reg 1 # CLK $end
$var reg 32 $ accuracy_control [31:0] $end
$var reg 1 % enable $end
$var reg 3 & funct3 [2:0] $end
$var reg 7 ' funct7 [6:0] $end
$var reg 7 ( opcode [6:0] $end
$var reg 32 ) rs1 [31:0] $end
$var reg 32 * rs2 [31:0] $end
$scope module uut $end
$var wire 1 # CLK $end
$var wire 32 + accuracy_control [31:0] $end
$var wire 3 , funct3 [2:0] $end
$var wire 7 - funct7 [6:0] $end
$var wire 7 . opcode [6:0] $end
$var wire 32 / rs1 [31:0] $end
$var wire 32 0 rs2 [31:0] $end
$var wire 64 1 result [63:0] $end
$var wire 1 2 n_busy $end
$var reg 1 3 enable $end
$var reg 32 4 input_1 [31:0] $end
$var reg 32 5 input_2 [31:0] $end
$var reg 32 6 mul_output [31:0] $end
$var reg 1 ! mul_unit_busy $end
$var reg 32 7 operand_1 [31:0] $end
$var reg 32 8 operand_2 [31:0] $end
$scope module multiplier $end
$var wire 1 # CLK $end
$var wire 7 9 Er [6:0] $end
$var wire 32 : Operand_1 [31:0] $end
$var wire 32 ; Operand_2 [31:0] $end
$var wire 1 3 enable $end
$var wire 64 < Result [63:0] $end
$var wire 1 2 Ready $end
$scope module multiplier_HIGHxHIGH $end
$var wire 1 # CLK $end
$var wire 7 = Er [6:0] $end
$var wire 16 > Operand_1 [15:0] $end
$var wire 16 ? Operand_2 [15:0] $end
$var wire 1 3 enable $end
$var wire 16 @ mul_result [15:0] $end
$var parameter 3 A reset $end
$var reg 1 B Ready $end
$var reg 32 C Result [31:0] $end
$var reg 8 D mul_input_1 [7:0] $end
$var reg 8 E mul_input_2 [7:0] $end
$var reg 16 F mul_result_1 [15:0] $end
$var reg 16 G mul_result_2 [15:0] $end
$var reg 16 H mul_result_3 [15:0] $end
$var reg 16 I mul_result_4 [15:0] $end
$var reg 3 J next_state [2:0] $end
$var reg 3 K state [2:0] $end
$scope module mul $end
$var wire 1 # CLK $end
$var wire 7 L Er [6:0] $end
$var wire 8 M Operand_1 [7:0] $end
$var wire 8 N Operand_2 [7:0] $end
$var wire 15 O V2_Stage_1 [14:0] $end
$var wire 15 P V1_Stage_1 [14:0] $end
$var wire 15 Q SumSignal_Stage_2 [14:0] $end
$var wire 16 R Result [15:0] $end
$var wire 11 S P6_Stage_1 [10:0] $end
$var wire 11 T P5_Stage_1 [10:0] $end
$var wire 15 U CarrySignal_Stage_2 [14:0] $end
$var reg 15 V CarrySignal_Stage_3 [14:0] $end
$var reg 11 W P5_Stage_2 [10:0] $end
$var reg 11 X P6_Stage_2 [10:0] $end
$var reg 15 Y SumSignal_Stage_3 [14:0] $end
$var reg 15 Z V1_Stage_2 [14:0] $end
$var reg 15 [ V2_Stage_2 [14:0] $end
$scope module MS1 $end
$var wire 8 \ Operand_1 [7:0] $end
$var wire 8 ] Operand_2 [7:0] $end
$var wire 15 ^ V2 [14:0] $end
$var wire 15 _ V1 [14:0] $end
$var wire 11 ` P6 [10:0] $end
$var wire 11 a P5 [10:0] $end
$var wire 9 b P4 [8:0] $end
$var wire 9 c P3 [8:0] $end
$var wire 9 d P2 [8:0] $end
$var wire 9 e P1 [8:0] $end
$scope begin genblk1[1] $end
$var parameter 2 f i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 g i $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 h i $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 i i $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 j i $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 k i $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 l i $end
$upscope $end
$scope begin genblk1[8] $end
$var parameter 5 m i $end
$upscope $end
$scope module atc_4 $end
$var wire 15 n V2 [14:0] $end
$var wire 11 o Q6 [10:0] $end
$var wire 11 p Q5 [10:0] $end
$var wire 11 q P6 [10:0] $end
$var wire 11 r P5 [10:0] $end
$var wire 9 s P4 [8:0] $end
$var wire 9 t P3 [8:0] $end
$var wire 9 u P2 [8:0] $end
$var wire 9 v P1 [8:0] $end
$scope module iCAC_5 $end
$var wire 11 w Q [10:0] $end
$var wire 11 x P [10:0] $end
$var wire 11 y D2_Shifted [10:0] $end
$var wire 9 z D2 [8:0] $end
$var wire 9 { D1 [8:0] $end
$var parameter 32 | SHIFT_BITS $end
$var parameter 32 } WIDTH $end
$upscope $end
$scope module iCAC_6 $end
$var wire 11 ~ Q [10:0] $end
$var wire 11 !" P [10:0] $end
$var wire 11 "" D2_Shifted [10:0] $end
$var wire 9 #" D2 [8:0] $end
$var wire 9 $" D1 [8:0] $end
$var parameter 32 %" SHIFT_BITS $end
$var parameter 32 &" WIDTH $end
$upscope $end
$upscope $end
$scope module atc_8 $end
$var wire 15 '" V1 [14:0] $end
$var wire 9 (" Q4 [8:0] $end
$var wire 9 )" Q3 [8:0] $end
$var wire 9 *" Q2 [8:0] $end
$var wire 9 +" Q1 [8:0] $end
$var wire 8 ," PP_8 [7:0] $end
$var wire 8 -" PP_7 [7:0] $end
$var wire 8 ." PP_6 [7:0] $end
$var wire 8 /" PP_5 [7:0] $end
$var wire 8 0" PP_4 [7:0] $end
$var wire 8 1" PP_3 [7:0] $end
$var wire 8 2" PP_2 [7:0] $end
$var wire 8 3" PP_1 [7:0] $end
$var wire 9 4" P4 [8:0] $end
$var wire 9 5" P3 [8:0] $end
$var wire 9 6" P2 [8:0] $end
$var wire 9 7" P1 [8:0] $end
$scope module iCAC_1 $end
$var wire 9 8" Q [8:0] $end
$var wire 9 9" P [8:0] $end
$var wire 9 :" D2_Shifted [8:0] $end
$var wire 8 ;" D2 [7:0] $end
$var wire 8 <" D1 [7:0] $end
$var parameter 32 =" SHIFT_BITS $end
$var parameter 32 >" WIDTH $end
$upscope $end
$scope module iCAC_2 $end
$var wire 9 ?" Q [8:0] $end
$var wire 9 @" P [8:0] $end
$var wire 9 A" D2_Shifted [8:0] $end
$var wire 8 B" D2 [7:0] $end
$var wire 8 C" D1 [7:0] $end
$var parameter 32 D" SHIFT_BITS $end
$var parameter 32 E" WIDTH $end
$upscope $end
$scope module iCAC_3 $end
$var wire 9 F" Q [8:0] $end
$var wire 9 G" P [8:0] $end
$var wire 9 H" D2_Shifted [8:0] $end
$var wire 8 I" D2 [7:0] $end
$var wire 8 J" D1 [7:0] $end
$var parameter 32 K" SHIFT_BITS $end
$var parameter 32 L" WIDTH $end
$upscope $end
$scope module iCAC_4 $end
$var wire 9 M" Q [8:0] $end
$var wire 9 N" P [8:0] $end
$var wire 9 O" D2_Shifted [8:0] $end
$var wire 8 P" D2 [7:0] $end
$var wire 8 Q" D1 [7:0] $end
$var parameter 32 R" SHIFT_BITS $end
$var parameter 32 S" WIDTH $end
$upscope $end
$upscope $end
$upscope $end
$scope module MS2 $end
$var wire 7 T" ORed_PPs [10:4] $end
$var wire 11 U" P5 [10:0] $end
$var wire 11 V" P6 [10:0] $end
$var wire 15 W" V1 [14:0] $end
$var wire 15 X" V2 [14:0] $end
$var wire 15 Y" SumSignal [14:0] $end
$var wire 15 Z" Q7 [14:0] $end
$var wire 15 [" P7 [14:0] $end
$var wire 15 \" CarrySignal [14:0] $end
$scope module FA_1 $end
$var wire 1 ]" A $end
$var wire 1 ^" B $end
$var wire 1 _" Cin $end
$var wire 1 `" Cout $end
$var wire 1 a" Sum $end
$upscope $end
$scope module FA_10 $end
$var wire 1 b" A $end
$var wire 1 c" B $end
$var wire 1 d" Cin $end
$var wire 1 e" Cout $end
$var wire 1 f" Sum $end
$upscope $end
$scope module FA_11 $end
$var wire 1 g" A $end
$var wire 1 h" B $end
$var wire 1 i" Cin $end
$var wire 1 j" Cout $end
$var wire 1 k" Sum $end
$upscope $end
$scope module FA_2 $end
$var wire 1 l" A $end
$var wire 1 m" B $end
$var wire 1 n" Cin $end
$var wire 1 o" Cout $end
$var wire 1 p" Sum $end
$upscope $end
$scope module FA_3 $end
$var wire 1 q" A $end
$var wire 1 r" B $end
$var wire 1 s" Cin $end
$var wire 1 t" Cout $end
$var wire 1 u" Sum $end
$upscope $end
$scope module FA_4 $end
$var wire 1 v" A $end
$var wire 1 w" B $end
$var wire 1 x" Cin $end
$var wire 1 y" Cout $end
$var wire 1 z" Sum $end
$upscope $end
$scope module FA_5 $end
$var wire 1 {" A $end
$var wire 1 |" B $end
$var wire 1 }" Cin $end
$var wire 1 ~" Cout $end
$var wire 1 !# Sum $end
$upscope $end
$scope module FA_6 $end
$var wire 1 "# A $end
$var wire 1 ## B $end
$var wire 1 $# Cin $end
$var wire 1 %# Cout $end
$var wire 1 &# Sum $end
$upscope $end
$scope module FA_7 $end
$var wire 1 '# A $end
$var wire 1 (# B $end
$var wire 1 )# Cin $end
$var wire 1 *# Cout $end
$var wire 1 +# Sum $end
$upscope $end
$scope module FA_8 $end
$var wire 1 ,# A $end
$var wire 1 -# B $end
$var wire 1 .# Cin $end
$var wire 1 /# Cout $end
$var wire 1 0# Sum $end
$upscope $end
$scope module FA_9 $end
$var wire 1 1# A $end
$var wire 1 2# B $end
$var wire 1 3# Cin $end
$var wire 1 4# Cout $end
$var wire 1 5# Sum $end
$upscope $end
$scope module HA_1 $end
$var wire 1 6# A $end
$var wire 1 7# B $end
$var wire 1 8# Cout $end
$var wire 1 9# Sum $end
$upscope $end
$scope module HA_2 $end
$var wire 1 :# A $end
$var wire 1 ;# B $end
$var wire 1 <# Cout $end
$var wire 1 =# Sum $end
$upscope $end
$scope module iCAC_7 $end
$var wire 11 ># D1 [10:0] $end
$var wire 11 ?# D2 [10:0] $end
$var wire 15 @# Q [14:0] $end
$var wire 15 A# P [14:0] $end
$var wire 15 B# D2_Shifted [14:0] $end
$var parameter 32 C# SHIFT_BITS $end
$var parameter 32 D# WIDTH $end
$upscope $end
$upscope $end
$scope module MS3 $end
$var wire 15 E# CarrySignal [14:0] $end
$var wire 7 F# Er [6:0] $end
$var wire 15 G# SumSignal [14:0] $end
$var wire 9 H# inter_Carry [13:5] $end
$var wire 16 I# Result [15:0] $end
$scope module ECA_FA_1 $end
$var wire 1 J# A $end
$var wire 1 K# B $end
$var wire 1 L# Cin $end
$var wire 1 M# Cout $end
$var wire 1 N# Er $end
$var wire 1 O# Sum $end
$upscope $end
$scope module ECA_FA_2 $end
$var wire 1 P# A $end
$var wire 1 Q# B $end
$var wire 1 R# Cin $end
$var wire 1 S# Cout $end
$var wire 1 T# Er $end
$var wire 1 U# Sum $end
$upscope $end
$scope module ECA_FA_3 $end
$var wire 1 V# A $end
$var wire 1 W# B $end
$var wire 1 X# Cin $end
$var wire 1 Y# Cout $end
$var wire 1 Z# Er $end
$var wire 1 [# Sum $end
$upscope $end
$scope module ECA_FA_4 $end
$var wire 1 \# A $end
$var wire 1 ]# B $end
$var wire 1 ^# Cin $end
$var wire 1 _# Cout $end
$var wire 1 `# Er $end
$var wire 1 a# Sum $end
$upscope $end
$scope module ECA_FA_5 $end
$var wire 1 b# A $end
$var wire 1 c# B $end
$var wire 1 d# Cin $end
$var wire 1 e# Cout $end
$var wire 1 f# Er $end
$var wire 1 g# Sum $end
$upscope $end
$scope module ECA_FA_6 $end
$var wire 1 h# A $end
$var wire 1 i# B $end
$var wire 1 j# Cin $end
$var wire 1 k# Cout $end
$var wire 1 l# Er $end
$var wire 1 m# Sum $end
$upscope $end
$scope module ECA_FA_7 $end
$var wire 1 n# A $end
$var wire 1 o# B $end
$var wire 1 p# Cin $end
$var wire 1 q# Cout $end
$var wire 1 r# Er $end
$var wire 1 s# Sum $end
$upscope $end
$scope module FA_12 $end
$var wire 1 t# A $end
$var wire 1 u# B $end
$var wire 1 v# Cin $end
$var wire 1 w# Cout $end
$var wire 1 x# Sum $end
$upscope $end
$scope module FA_13 $end
$var wire 1 y# A $end
$var wire 1 z# B $end
$var wire 1 {# Cin $end
$var wire 1 |# Cout $end
$var wire 1 }# Sum $end
$upscope $end
$scope module FA_14 $end
$var wire 1 ~# A $end
$var wire 1 !$ B $end
$var wire 1 "$ Cin $end
$var wire 1 #$ Cout $end
$var wire 1 $$ Sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module multiplier_HIGHxLOW $end
$var wire 1 # CLK $end
$var wire 7 %$ Er [6:0] $end
$var wire 16 &$ Operand_1 [15:0] $end
$var wire 16 '$ Operand_2 [15:0] $end
$var wire 1 3 enable $end
$var wire 16 ($ mul_result [15:0] $end
$var parameter 3 )$ reset $end
$var reg 1 *$ Ready $end
$var reg 32 +$ Result [31:0] $end
$var reg 8 ,$ mul_input_1 [7:0] $end
$var reg 8 -$ mul_input_2 [7:0] $end
$var reg 16 .$ mul_result_1 [15:0] $end
$var reg 16 /$ mul_result_2 [15:0] $end
$var reg 16 0$ mul_result_3 [15:0] $end
$var reg 16 1$ mul_result_4 [15:0] $end
$var reg 3 2$ next_state [2:0] $end
$var reg 3 3$ state [2:0] $end
$scope module mul $end
$var wire 1 # CLK $end
$var wire 7 4$ Er [6:0] $end
$var wire 8 5$ Operand_1 [7:0] $end
$var wire 8 6$ Operand_2 [7:0] $end
$var wire 15 7$ V2_Stage_1 [14:0] $end
$var wire 15 8$ V1_Stage_1 [14:0] $end
$var wire 15 9$ SumSignal_Stage_2 [14:0] $end
$var wire 16 :$ Result [15:0] $end
$var wire 11 ;$ P6_Stage_1 [10:0] $end
$var wire 11 <$ P5_Stage_1 [10:0] $end
$var wire 15 =$ CarrySignal_Stage_2 [14:0] $end
$var reg 15 >$ CarrySignal_Stage_3 [14:0] $end
$var reg 11 ?$ P5_Stage_2 [10:0] $end
$var reg 11 @$ P6_Stage_2 [10:0] $end
$var reg 15 A$ SumSignal_Stage_3 [14:0] $end
$var reg 15 B$ V1_Stage_2 [14:0] $end
$var reg 15 C$ V2_Stage_2 [14:0] $end
$scope module MS1 $end
$var wire 8 D$ Operand_1 [7:0] $end
$var wire 8 E$ Operand_2 [7:0] $end
$var wire 15 F$ V2 [14:0] $end
$var wire 15 G$ V1 [14:0] $end
$var wire 11 H$ P6 [10:0] $end
$var wire 11 I$ P5 [10:0] $end
$var wire 9 J$ P4 [8:0] $end
$var wire 9 K$ P3 [8:0] $end
$var wire 9 L$ P2 [8:0] $end
$var wire 9 M$ P1 [8:0] $end
$scope begin genblk1[1] $end
$var parameter 2 N$ i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 O$ i $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 P$ i $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 Q$ i $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 R$ i $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 S$ i $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 T$ i $end
$upscope $end
$scope begin genblk1[8] $end
$var parameter 5 U$ i $end
$upscope $end
$scope module atc_4 $end
$var wire 15 V$ V2 [14:0] $end
$var wire 11 W$ Q6 [10:0] $end
$var wire 11 X$ Q5 [10:0] $end
$var wire 11 Y$ P6 [10:0] $end
$var wire 11 Z$ P5 [10:0] $end
$var wire 9 [$ P4 [8:0] $end
$var wire 9 \$ P3 [8:0] $end
$var wire 9 ]$ P2 [8:0] $end
$var wire 9 ^$ P1 [8:0] $end
$scope module iCAC_5 $end
$var wire 11 _$ Q [10:0] $end
$var wire 11 `$ P [10:0] $end
$var wire 11 a$ D2_Shifted [10:0] $end
$var wire 9 b$ D2 [8:0] $end
$var wire 9 c$ D1 [8:0] $end
$var parameter 32 d$ SHIFT_BITS $end
$var parameter 32 e$ WIDTH $end
$upscope $end
$scope module iCAC_6 $end
$var wire 11 f$ Q [10:0] $end
$var wire 11 g$ P [10:0] $end
$var wire 11 h$ D2_Shifted [10:0] $end
$var wire 9 i$ D2 [8:0] $end
$var wire 9 j$ D1 [8:0] $end
$var parameter 32 k$ SHIFT_BITS $end
$var parameter 32 l$ WIDTH $end
$upscope $end
$upscope $end
$scope module atc_8 $end
$var wire 15 m$ V1 [14:0] $end
$var wire 9 n$ Q4 [8:0] $end
$var wire 9 o$ Q3 [8:0] $end
$var wire 9 p$ Q2 [8:0] $end
$var wire 9 q$ Q1 [8:0] $end
$var wire 8 r$ PP_8 [7:0] $end
$var wire 8 s$ PP_7 [7:0] $end
$var wire 8 t$ PP_6 [7:0] $end
$var wire 8 u$ PP_5 [7:0] $end
$var wire 8 v$ PP_4 [7:0] $end
$var wire 8 w$ PP_3 [7:0] $end
$var wire 8 x$ PP_2 [7:0] $end
$var wire 8 y$ PP_1 [7:0] $end
$var wire 9 z$ P4 [8:0] $end
$var wire 9 {$ P3 [8:0] $end
$var wire 9 |$ P2 [8:0] $end
$var wire 9 }$ P1 [8:0] $end
$scope module iCAC_1 $end
$var wire 9 ~$ Q [8:0] $end
$var wire 9 !% P [8:0] $end
$var wire 9 "% D2_Shifted [8:0] $end
$var wire 8 #% D2 [7:0] $end
$var wire 8 $% D1 [7:0] $end
$var parameter 32 %% SHIFT_BITS $end
$var parameter 32 &% WIDTH $end
$upscope $end
$scope module iCAC_2 $end
$var wire 9 '% Q [8:0] $end
$var wire 9 (% P [8:0] $end
$var wire 9 )% D2_Shifted [8:0] $end
$var wire 8 *% D2 [7:0] $end
$var wire 8 +% D1 [7:0] $end
$var parameter 32 ,% SHIFT_BITS $end
$var parameter 32 -% WIDTH $end
$upscope $end
$scope module iCAC_3 $end
$var wire 9 .% Q [8:0] $end
$var wire 9 /% P [8:0] $end
$var wire 9 0% D2_Shifted [8:0] $end
$var wire 8 1% D2 [7:0] $end
$var wire 8 2% D1 [7:0] $end
$var parameter 32 3% SHIFT_BITS $end
$var parameter 32 4% WIDTH $end
$upscope $end
$scope module iCAC_4 $end
$var wire 9 5% Q [8:0] $end
$var wire 9 6% P [8:0] $end
$var wire 9 7% D2_Shifted [8:0] $end
$var wire 8 8% D2 [7:0] $end
$var wire 8 9% D1 [7:0] $end
$var parameter 32 :% SHIFT_BITS $end
$var parameter 32 ;% WIDTH $end
$upscope $end
$upscope $end
$upscope $end
$scope module MS2 $end
$var wire 7 <% ORed_PPs [10:4] $end
$var wire 11 =% P5 [10:0] $end
$var wire 11 >% P6 [10:0] $end
$var wire 15 ?% V1 [14:0] $end
$var wire 15 @% V2 [14:0] $end
$var wire 15 A% SumSignal [14:0] $end
$var wire 15 B% Q7 [14:0] $end
$var wire 15 C% P7 [14:0] $end
$var wire 15 D% CarrySignal [14:0] $end
$scope module FA_1 $end
$var wire 1 E% A $end
$var wire 1 F% B $end
$var wire 1 G% Cin $end
$var wire 1 H% Cout $end
$var wire 1 I% Sum $end
$upscope $end
$scope module FA_10 $end
$var wire 1 J% A $end
$var wire 1 K% B $end
$var wire 1 L% Cin $end
$var wire 1 M% Cout $end
$var wire 1 N% Sum $end
$upscope $end
$scope module FA_11 $end
$var wire 1 O% A $end
$var wire 1 P% B $end
$var wire 1 Q% Cin $end
$var wire 1 R% Cout $end
$var wire 1 S% Sum $end
$upscope $end
$scope module FA_2 $end
$var wire 1 T% A $end
$var wire 1 U% B $end
$var wire 1 V% Cin $end
$var wire 1 W% Cout $end
$var wire 1 X% Sum $end
$upscope $end
$scope module FA_3 $end
$var wire 1 Y% A $end
$var wire 1 Z% B $end
$var wire 1 [% Cin $end
$var wire 1 \% Cout $end
$var wire 1 ]% Sum $end
$upscope $end
$scope module FA_4 $end
$var wire 1 ^% A $end
$var wire 1 _% B $end
$var wire 1 `% Cin $end
$var wire 1 a% Cout $end
$var wire 1 b% Sum $end
$upscope $end
$scope module FA_5 $end
$var wire 1 c% A $end
$var wire 1 d% B $end
$var wire 1 e% Cin $end
$var wire 1 f% Cout $end
$var wire 1 g% Sum $end
$upscope $end
$scope module FA_6 $end
$var wire 1 h% A $end
$var wire 1 i% B $end
$var wire 1 j% Cin $end
$var wire 1 k% Cout $end
$var wire 1 l% Sum $end
$upscope $end
$scope module FA_7 $end
$var wire 1 m% A $end
$var wire 1 n% B $end
$var wire 1 o% Cin $end
$var wire 1 p% Cout $end
$var wire 1 q% Sum $end
$upscope $end
$scope module FA_8 $end
$var wire 1 r% A $end
$var wire 1 s% B $end
$var wire 1 t% Cin $end
$var wire 1 u% Cout $end
$var wire 1 v% Sum $end
$upscope $end
$scope module FA_9 $end
$var wire 1 w% A $end
$var wire 1 x% B $end
$var wire 1 y% Cin $end
$var wire 1 z% Cout $end
$var wire 1 {% Sum $end
$upscope $end
$scope module HA_1 $end
$var wire 1 |% A $end
$var wire 1 }% B $end
$var wire 1 ~% Cout $end
$var wire 1 !& Sum $end
$upscope $end
$scope module HA_2 $end
$var wire 1 "& A $end
$var wire 1 #& B $end
$var wire 1 $& Cout $end
$var wire 1 %& Sum $end
$upscope $end
$scope module iCAC_7 $end
$var wire 11 && D1 [10:0] $end
$var wire 11 '& D2 [10:0] $end
$var wire 15 (& Q [14:0] $end
$var wire 15 )& P [14:0] $end
$var wire 15 *& D2_Shifted [14:0] $end
$var parameter 32 +& SHIFT_BITS $end
$var parameter 32 ,& WIDTH $end
$upscope $end
$upscope $end
$scope module MS3 $end
$var wire 15 -& CarrySignal [14:0] $end
$var wire 7 .& Er [6:0] $end
$var wire 15 /& SumSignal [14:0] $end
$var wire 9 0& inter_Carry [13:5] $end
$var wire 16 1& Result [15:0] $end
$scope module ECA_FA_1 $end
$var wire 1 2& A $end
$var wire 1 3& B $end
$var wire 1 4& Cin $end
$var wire 1 5& Cout $end
$var wire 1 6& Er $end
$var wire 1 7& Sum $end
$upscope $end
$scope module ECA_FA_2 $end
$var wire 1 8& A $end
$var wire 1 9& B $end
$var wire 1 :& Cin $end
$var wire 1 ;& Cout $end
$var wire 1 <& Er $end
$var wire 1 =& Sum $end
$upscope $end
$scope module ECA_FA_3 $end
$var wire 1 >& A $end
$var wire 1 ?& B $end
$var wire 1 @& Cin $end
$var wire 1 A& Cout $end
$var wire 1 B& Er $end
$var wire 1 C& Sum $end
$upscope $end
$scope module ECA_FA_4 $end
$var wire 1 D& A $end
$var wire 1 E& B $end
$var wire 1 F& Cin $end
$var wire 1 G& Cout $end
$var wire 1 H& Er $end
$var wire 1 I& Sum $end
$upscope $end
$scope module ECA_FA_5 $end
$var wire 1 J& A $end
$var wire 1 K& B $end
$var wire 1 L& Cin $end
$var wire 1 M& Cout $end
$var wire 1 N& Er $end
$var wire 1 O& Sum $end
$upscope $end
$scope module ECA_FA_6 $end
$var wire 1 P& A $end
$var wire 1 Q& B $end
$var wire 1 R& Cin $end
$var wire 1 S& Cout $end
$var wire 1 T& Er $end
$var wire 1 U& Sum $end
$upscope $end
$scope module ECA_FA_7 $end
$var wire 1 V& A $end
$var wire 1 W& B $end
$var wire 1 X& Cin $end
$var wire 1 Y& Cout $end
$var wire 1 Z& Er $end
$var wire 1 [& Sum $end
$upscope $end
$scope module FA_12 $end
$var wire 1 \& A $end
$var wire 1 ]& B $end
$var wire 1 ^& Cin $end
$var wire 1 _& Cout $end
$var wire 1 `& Sum $end
$upscope $end
$scope module FA_13 $end
$var wire 1 a& A $end
$var wire 1 b& B $end
$var wire 1 c& Cin $end
$var wire 1 d& Cout $end
$var wire 1 e& Sum $end
$upscope $end
$scope module FA_14 $end
$var wire 1 f& A $end
$var wire 1 g& B $end
$var wire 1 h& Cin $end
$var wire 1 i& Cout $end
$var wire 1 j& Sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module multiplier_LOWxHIGH $end
$var wire 1 # CLK $end
$var wire 7 k& Er [6:0] $end
$var wire 16 l& Operand_1 [15:0] $end
$var wire 16 m& Operand_2 [15:0] $end
$var wire 1 3 enable $end
$var wire 16 n& mul_result [15:0] $end
$var parameter 3 o& reset $end
$var reg 1 p& Ready $end
$var reg 32 q& Result [31:0] $end
$var reg 8 r& mul_input_1 [7:0] $end
$var reg 8 s& mul_input_2 [7:0] $end
$var reg 16 t& mul_result_1 [15:0] $end
$var reg 16 u& mul_result_2 [15:0] $end
$var reg 16 v& mul_result_3 [15:0] $end
$var reg 16 w& mul_result_4 [15:0] $end
$var reg 3 x& next_state [2:0] $end
$var reg 3 y& state [2:0] $end
$scope module mul $end
$var wire 1 # CLK $end
$var wire 7 z& Er [6:0] $end
$var wire 8 {& Operand_1 [7:0] $end
$var wire 8 |& Operand_2 [7:0] $end
$var wire 15 }& V2_Stage_1 [14:0] $end
$var wire 15 ~& V1_Stage_1 [14:0] $end
$var wire 15 !' SumSignal_Stage_2 [14:0] $end
$var wire 16 "' Result [15:0] $end
$var wire 11 #' P6_Stage_1 [10:0] $end
$var wire 11 $' P5_Stage_1 [10:0] $end
$var wire 15 %' CarrySignal_Stage_2 [14:0] $end
$var reg 15 &' CarrySignal_Stage_3 [14:0] $end
$var reg 11 '' P5_Stage_2 [10:0] $end
$var reg 11 (' P6_Stage_2 [10:0] $end
$var reg 15 )' SumSignal_Stage_3 [14:0] $end
$var reg 15 *' V1_Stage_2 [14:0] $end
$var reg 15 +' V2_Stage_2 [14:0] $end
$scope module MS1 $end
$var wire 8 ,' Operand_1 [7:0] $end
$var wire 8 -' Operand_2 [7:0] $end
$var wire 15 .' V2 [14:0] $end
$var wire 15 /' V1 [14:0] $end
$var wire 11 0' P6 [10:0] $end
$var wire 11 1' P5 [10:0] $end
$var wire 9 2' P4 [8:0] $end
$var wire 9 3' P3 [8:0] $end
$var wire 9 4' P2 [8:0] $end
$var wire 9 5' P1 [8:0] $end
$scope begin genblk1[1] $end
$var parameter 2 6' i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 7' i $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 8' i $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 9' i $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 :' i $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 ;' i $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 <' i $end
$upscope $end
$scope begin genblk1[8] $end
$var parameter 5 =' i $end
$upscope $end
$scope module atc_4 $end
$var wire 15 >' V2 [14:0] $end
$var wire 11 ?' Q6 [10:0] $end
$var wire 11 @' Q5 [10:0] $end
$var wire 11 A' P6 [10:0] $end
$var wire 11 B' P5 [10:0] $end
$var wire 9 C' P4 [8:0] $end
$var wire 9 D' P3 [8:0] $end
$var wire 9 E' P2 [8:0] $end
$var wire 9 F' P1 [8:0] $end
$scope module iCAC_5 $end
$var wire 11 G' Q [10:0] $end
$var wire 11 H' P [10:0] $end
$var wire 11 I' D2_Shifted [10:0] $end
$var wire 9 J' D2 [8:0] $end
$var wire 9 K' D1 [8:0] $end
$var parameter 32 L' SHIFT_BITS $end
$var parameter 32 M' WIDTH $end
$upscope $end
$scope module iCAC_6 $end
$var wire 11 N' Q [10:0] $end
$var wire 11 O' P [10:0] $end
$var wire 11 P' D2_Shifted [10:0] $end
$var wire 9 Q' D2 [8:0] $end
$var wire 9 R' D1 [8:0] $end
$var parameter 32 S' SHIFT_BITS $end
$var parameter 32 T' WIDTH $end
$upscope $end
$upscope $end
$scope module atc_8 $end
$var wire 15 U' V1 [14:0] $end
$var wire 9 V' Q4 [8:0] $end
$var wire 9 W' Q3 [8:0] $end
$var wire 9 X' Q2 [8:0] $end
$var wire 9 Y' Q1 [8:0] $end
$var wire 8 Z' PP_8 [7:0] $end
$var wire 8 [' PP_7 [7:0] $end
$var wire 8 \' PP_6 [7:0] $end
$var wire 8 ]' PP_5 [7:0] $end
$var wire 8 ^' PP_4 [7:0] $end
$var wire 8 _' PP_3 [7:0] $end
$var wire 8 `' PP_2 [7:0] $end
$var wire 8 a' PP_1 [7:0] $end
$var wire 9 b' P4 [8:0] $end
$var wire 9 c' P3 [8:0] $end
$var wire 9 d' P2 [8:0] $end
$var wire 9 e' P1 [8:0] $end
$scope module iCAC_1 $end
$var wire 9 f' Q [8:0] $end
$var wire 9 g' P [8:0] $end
$var wire 9 h' D2_Shifted [8:0] $end
$var wire 8 i' D2 [7:0] $end
$var wire 8 j' D1 [7:0] $end
$var parameter 32 k' SHIFT_BITS $end
$var parameter 32 l' WIDTH $end
$upscope $end
$scope module iCAC_2 $end
$var wire 9 m' Q [8:0] $end
$var wire 9 n' P [8:0] $end
$var wire 9 o' D2_Shifted [8:0] $end
$var wire 8 p' D2 [7:0] $end
$var wire 8 q' D1 [7:0] $end
$var parameter 32 r' SHIFT_BITS $end
$var parameter 32 s' WIDTH $end
$upscope $end
$scope module iCAC_3 $end
$var wire 9 t' Q [8:0] $end
$var wire 9 u' P [8:0] $end
$var wire 9 v' D2_Shifted [8:0] $end
$var wire 8 w' D2 [7:0] $end
$var wire 8 x' D1 [7:0] $end
$var parameter 32 y' SHIFT_BITS $end
$var parameter 32 z' WIDTH $end
$upscope $end
$scope module iCAC_4 $end
$var wire 9 {' Q [8:0] $end
$var wire 9 |' P [8:0] $end
$var wire 9 }' D2_Shifted [8:0] $end
$var wire 8 ~' D2 [7:0] $end
$var wire 8 !( D1 [7:0] $end
$var parameter 32 "( SHIFT_BITS $end
$var parameter 32 #( WIDTH $end
$upscope $end
$upscope $end
$upscope $end
$scope module MS2 $end
$var wire 7 $( ORed_PPs [10:4] $end
$var wire 11 %( P5 [10:0] $end
$var wire 11 &( P6 [10:0] $end
$var wire 15 '( V1 [14:0] $end
$var wire 15 (( V2 [14:0] $end
$var wire 15 )( SumSignal [14:0] $end
$var wire 15 *( Q7 [14:0] $end
$var wire 15 +( P7 [14:0] $end
$var wire 15 ,( CarrySignal [14:0] $end
$scope module FA_1 $end
$var wire 1 -( A $end
$var wire 1 .( B $end
$var wire 1 /( Cin $end
$var wire 1 0( Cout $end
$var wire 1 1( Sum $end
$upscope $end
$scope module FA_10 $end
$var wire 1 2( A $end
$var wire 1 3( B $end
$var wire 1 4( Cin $end
$var wire 1 5( Cout $end
$var wire 1 6( Sum $end
$upscope $end
$scope module FA_11 $end
$var wire 1 7( A $end
$var wire 1 8( B $end
$var wire 1 9( Cin $end
$var wire 1 :( Cout $end
$var wire 1 ;( Sum $end
$upscope $end
$scope module FA_2 $end
$var wire 1 <( A $end
$var wire 1 =( B $end
$var wire 1 >( Cin $end
$var wire 1 ?( Cout $end
$var wire 1 @( Sum $end
$upscope $end
$scope module FA_3 $end
$var wire 1 A( A $end
$var wire 1 B( B $end
$var wire 1 C( Cin $end
$var wire 1 D( Cout $end
$var wire 1 E( Sum $end
$upscope $end
$scope module FA_4 $end
$var wire 1 F( A $end
$var wire 1 G( B $end
$var wire 1 H( Cin $end
$var wire 1 I( Cout $end
$var wire 1 J( Sum $end
$upscope $end
$scope module FA_5 $end
$var wire 1 K( A $end
$var wire 1 L( B $end
$var wire 1 M( Cin $end
$var wire 1 N( Cout $end
$var wire 1 O( Sum $end
$upscope $end
$scope module FA_6 $end
$var wire 1 P( A $end
$var wire 1 Q( B $end
$var wire 1 R( Cin $end
$var wire 1 S( Cout $end
$var wire 1 T( Sum $end
$upscope $end
$scope module FA_7 $end
$var wire 1 U( A $end
$var wire 1 V( B $end
$var wire 1 W( Cin $end
$var wire 1 X( Cout $end
$var wire 1 Y( Sum $end
$upscope $end
$scope module FA_8 $end
$var wire 1 Z( A $end
$var wire 1 [( B $end
$var wire 1 \( Cin $end
$var wire 1 ]( Cout $end
$var wire 1 ^( Sum $end
$upscope $end
$scope module FA_9 $end
$var wire 1 _( A $end
$var wire 1 `( B $end
$var wire 1 a( Cin $end
$var wire 1 b( Cout $end
$var wire 1 c( Sum $end
$upscope $end
$scope module HA_1 $end
$var wire 1 d( A $end
$var wire 1 e( B $end
$var wire 1 f( Cout $end
$var wire 1 g( Sum $end
$upscope $end
$scope module HA_2 $end
$var wire 1 h( A $end
$var wire 1 i( B $end
$var wire 1 j( Cout $end
$var wire 1 k( Sum $end
$upscope $end
$scope module iCAC_7 $end
$var wire 11 l( D1 [10:0] $end
$var wire 11 m( D2 [10:0] $end
$var wire 15 n( Q [14:0] $end
$var wire 15 o( P [14:0] $end
$var wire 15 p( D2_Shifted [14:0] $end
$var parameter 32 q( SHIFT_BITS $end
$var parameter 32 r( WIDTH $end
$upscope $end
$upscope $end
$scope module MS3 $end
$var wire 15 s( CarrySignal [14:0] $end
$var wire 7 t( Er [6:0] $end
$var wire 15 u( SumSignal [14:0] $end
$var wire 9 v( inter_Carry [13:5] $end
$var wire 16 w( Result [15:0] $end
$scope module ECA_FA_1 $end
$var wire 1 x( A $end
$var wire 1 y( B $end
$var wire 1 z( Cin $end
$var wire 1 {( Cout $end
$var wire 1 |( Er $end
$var wire 1 }( Sum $end
$upscope $end
$scope module ECA_FA_2 $end
$var wire 1 ~( A $end
$var wire 1 !) B $end
$var wire 1 ") Cin $end
$var wire 1 #) Cout $end
$var wire 1 $) Er $end
$var wire 1 %) Sum $end
$upscope $end
$scope module ECA_FA_3 $end
$var wire 1 &) A $end
$var wire 1 ') B $end
$var wire 1 () Cin $end
$var wire 1 )) Cout $end
$var wire 1 *) Er $end
$var wire 1 +) Sum $end
$upscope $end
$scope module ECA_FA_4 $end
$var wire 1 ,) A $end
$var wire 1 -) B $end
$var wire 1 .) Cin $end
$var wire 1 /) Cout $end
$var wire 1 0) Er $end
$var wire 1 1) Sum $end
$upscope $end
$scope module ECA_FA_5 $end
$var wire 1 2) A $end
$var wire 1 3) B $end
$var wire 1 4) Cin $end
$var wire 1 5) Cout $end
$var wire 1 6) Er $end
$var wire 1 7) Sum $end
$upscope $end
$scope module ECA_FA_6 $end
$var wire 1 8) A $end
$var wire 1 9) B $end
$var wire 1 :) Cin $end
$var wire 1 ;) Cout $end
$var wire 1 <) Er $end
$var wire 1 =) Sum $end
$upscope $end
$scope module ECA_FA_7 $end
$var wire 1 >) A $end
$var wire 1 ?) B $end
$var wire 1 @) Cin $end
$var wire 1 A) Cout $end
$var wire 1 B) Er $end
$var wire 1 C) Sum $end
$upscope $end
$scope module FA_12 $end
$var wire 1 D) A $end
$var wire 1 E) B $end
$var wire 1 F) Cin $end
$var wire 1 G) Cout $end
$var wire 1 H) Sum $end
$upscope $end
$scope module FA_13 $end
$var wire 1 I) A $end
$var wire 1 J) B $end
$var wire 1 K) Cin $end
$var wire 1 L) Cout $end
$var wire 1 M) Sum $end
$upscope $end
$scope module FA_14 $end
$var wire 1 N) A $end
$var wire 1 O) B $end
$var wire 1 P) Cin $end
$var wire 1 Q) Cout $end
$var wire 1 R) Sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module multiplier_LOWxLOW $end
$var wire 1 # CLK $end
$var wire 7 S) Er [6:0] $end
$var wire 16 T) Operand_1 [15:0] $end
$var wire 16 U) Operand_2 [15:0] $end
$var wire 1 3 enable $end
$var wire 16 V) mul_result [15:0] $end
$var parameter 3 W) reset $end
$var reg 1 X) Ready $end
$var reg 32 Y) Result [31:0] $end
$var reg 8 Z) mul_input_1 [7:0] $end
$var reg 8 [) mul_input_2 [7:0] $end
$var reg 16 \) mul_result_1 [15:0] $end
$var reg 16 ]) mul_result_2 [15:0] $end
$var reg 16 ^) mul_result_3 [15:0] $end
$var reg 16 _) mul_result_4 [15:0] $end
$var reg 3 `) next_state [2:0] $end
$var reg 3 a) state [2:0] $end
$scope module mul $end
$var wire 1 # CLK $end
$var wire 7 b) Er [6:0] $end
$var wire 8 c) Operand_1 [7:0] $end
$var wire 8 d) Operand_2 [7:0] $end
$var wire 15 e) V2_Stage_1 [14:0] $end
$var wire 15 f) V1_Stage_1 [14:0] $end
$var wire 15 g) SumSignal_Stage_2 [14:0] $end
$var wire 16 h) Result [15:0] $end
$var wire 11 i) P6_Stage_1 [10:0] $end
$var wire 11 j) P5_Stage_1 [10:0] $end
$var wire 15 k) CarrySignal_Stage_2 [14:0] $end
$var reg 15 l) CarrySignal_Stage_3 [14:0] $end
$var reg 11 m) P5_Stage_2 [10:0] $end
$var reg 11 n) P6_Stage_2 [10:0] $end
$var reg 15 o) SumSignal_Stage_3 [14:0] $end
$var reg 15 p) V1_Stage_2 [14:0] $end
$var reg 15 q) V2_Stage_2 [14:0] $end
$scope module MS1 $end
$var wire 8 r) Operand_1 [7:0] $end
$var wire 8 s) Operand_2 [7:0] $end
$var wire 15 t) V2 [14:0] $end
$var wire 15 u) V1 [14:0] $end
$var wire 11 v) P6 [10:0] $end
$var wire 11 w) P5 [10:0] $end
$var wire 9 x) P4 [8:0] $end
$var wire 9 y) P3 [8:0] $end
$var wire 9 z) P2 [8:0] $end
$var wire 9 {) P1 [8:0] $end
$scope begin genblk1[1] $end
$var parameter 2 |) i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 }) i $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 ~) i $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 !* i $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 "* i $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 #* i $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 $* i $end
$upscope $end
$scope begin genblk1[8] $end
$var parameter 5 %* i $end
$upscope $end
$scope module atc_4 $end
$var wire 15 &* V2 [14:0] $end
$var wire 11 '* Q6 [10:0] $end
$var wire 11 (* Q5 [10:0] $end
$var wire 11 )* P6 [10:0] $end
$var wire 11 ** P5 [10:0] $end
$var wire 9 +* P4 [8:0] $end
$var wire 9 ,* P3 [8:0] $end
$var wire 9 -* P2 [8:0] $end
$var wire 9 .* P1 [8:0] $end
$scope module iCAC_5 $end
$var wire 11 /* Q [10:0] $end
$var wire 11 0* P [10:0] $end
$var wire 11 1* D2_Shifted [10:0] $end
$var wire 9 2* D2 [8:0] $end
$var wire 9 3* D1 [8:0] $end
$var parameter 32 4* SHIFT_BITS $end
$var parameter 32 5* WIDTH $end
$upscope $end
$scope module iCAC_6 $end
$var wire 11 6* Q [10:0] $end
$var wire 11 7* P [10:0] $end
$var wire 11 8* D2_Shifted [10:0] $end
$var wire 9 9* D2 [8:0] $end
$var wire 9 :* D1 [8:0] $end
$var parameter 32 ;* SHIFT_BITS $end
$var parameter 32 <* WIDTH $end
$upscope $end
$upscope $end
$scope module atc_8 $end
$var wire 15 =* V1 [14:0] $end
$var wire 9 >* Q4 [8:0] $end
$var wire 9 ?* Q3 [8:0] $end
$var wire 9 @* Q2 [8:0] $end
$var wire 9 A* Q1 [8:0] $end
$var wire 8 B* PP_8 [7:0] $end
$var wire 8 C* PP_7 [7:0] $end
$var wire 8 D* PP_6 [7:0] $end
$var wire 8 E* PP_5 [7:0] $end
$var wire 8 F* PP_4 [7:0] $end
$var wire 8 G* PP_3 [7:0] $end
$var wire 8 H* PP_2 [7:0] $end
$var wire 8 I* PP_1 [7:0] $end
$var wire 9 J* P4 [8:0] $end
$var wire 9 K* P3 [8:0] $end
$var wire 9 L* P2 [8:0] $end
$var wire 9 M* P1 [8:0] $end
$scope module iCAC_1 $end
$var wire 9 N* Q [8:0] $end
$var wire 9 O* P [8:0] $end
$var wire 9 P* D2_Shifted [8:0] $end
$var wire 8 Q* D2 [7:0] $end
$var wire 8 R* D1 [7:0] $end
$var parameter 32 S* SHIFT_BITS $end
$var parameter 32 T* WIDTH $end
$upscope $end
$scope module iCAC_2 $end
$var wire 9 U* Q [8:0] $end
$var wire 9 V* P [8:0] $end
$var wire 9 W* D2_Shifted [8:0] $end
$var wire 8 X* D2 [7:0] $end
$var wire 8 Y* D1 [7:0] $end
$var parameter 32 Z* SHIFT_BITS $end
$var parameter 32 [* WIDTH $end
$upscope $end
$scope module iCAC_3 $end
$var wire 9 \* Q [8:0] $end
$var wire 9 ]* P [8:0] $end
$var wire 9 ^* D2_Shifted [8:0] $end
$var wire 8 _* D2 [7:0] $end
$var wire 8 `* D1 [7:0] $end
$var parameter 32 a* SHIFT_BITS $end
$var parameter 32 b* WIDTH $end
$upscope $end
$scope module iCAC_4 $end
$var wire 9 c* Q [8:0] $end
$var wire 9 d* P [8:0] $end
$var wire 9 e* D2_Shifted [8:0] $end
$var wire 8 f* D2 [7:0] $end
$var wire 8 g* D1 [7:0] $end
$var parameter 32 h* SHIFT_BITS $end
$var parameter 32 i* WIDTH $end
$upscope $end
$upscope $end
$upscope $end
$scope module MS2 $end
$var wire 7 j* ORed_PPs [10:4] $end
$var wire 11 k* P5 [10:0] $end
$var wire 11 l* P6 [10:0] $end
$var wire 15 m* V1 [14:0] $end
$var wire 15 n* V2 [14:0] $end
$var wire 15 o* SumSignal [14:0] $end
$var wire 15 p* Q7 [14:0] $end
$var wire 15 q* P7 [14:0] $end
$var wire 15 r* CarrySignal [14:0] $end
$scope module FA_1 $end
$var wire 1 s* A $end
$var wire 1 t* B $end
$var wire 1 u* Cin $end
$var wire 1 v* Cout $end
$var wire 1 w* Sum $end
$upscope $end
$scope module FA_10 $end
$var wire 1 x* A $end
$var wire 1 y* B $end
$var wire 1 z* Cin $end
$var wire 1 {* Cout $end
$var wire 1 |* Sum $end
$upscope $end
$scope module FA_11 $end
$var wire 1 }* A $end
$var wire 1 ~* B $end
$var wire 1 !+ Cin $end
$var wire 1 "+ Cout $end
$var wire 1 #+ Sum $end
$upscope $end
$scope module FA_2 $end
$var wire 1 $+ A $end
$var wire 1 %+ B $end
$var wire 1 &+ Cin $end
$var wire 1 '+ Cout $end
$var wire 1 (+ Sum $end
$upscope $end
$scope module FA_3 $end
$var wire 1 )+ A $end
$var wire 1 *+ B $end
$var wire 1 ++ Cin $end
$var wire 1 ,+ Cout $end
$var wire 1 -+ Sum $end
$upscope $end
$scope module FA_4 $end
$var wire 1 .+ A $end
$var wire 1 /+ B $end
$var wire 1 0+ Cin $end
$var wire 1 1+ Cout $end
$var wire 1 2+ Sum $end
$upscope $end
$scope module FA_5 $end
$var wire 1 3+ A $end
$var wire 1 4+ B $end
$var wire 1 5+ Cin $end
$var wire 1 6+ Cout $end
$var wire 1 7+ Sum $end
$upscope $end
$scope module FA_6 $end
$var wire 1 8+ A $end
$var wire 1 9+ B $end
$var wire 1 :+ Cin $end
$var wire 1 ;+ Cout $end
$var wire 1 <+ Sum $end
$upscope $end
$scope module FA_7 $end
$var wire 1 =+ A $end
$var wire 1 >+ B $end
$var wire 1 ?+ Cin $end
$var wire 1 @+ Cout $end
$var wire 1 A+ Sum $end
$upscope $end
$scope module FA_8 $end
$var wire 1 B+ A $end
$var wire 1 C+ B $end
$var wire 1 D+ Cin $end
$var wire 1 E+ Cout $end
$var wire 1 F+ Sum $end
$upscope $end
$scope module FA_9 $end
$var wire 1 G+ A $end
$var wire 1 H+ B $end
$var wire 1 I+ Cin $end
$var wire 1 J+ Cout $end
$var wire 1 K+ Sum $end
$upscope $end
$scope module HA_1 $end
$var wire 1 L+ A $end
$var wire 1 M+ B $end
$var wire 1 N+ Cout $end
$var wire 1 O+ Sum $end
$upscope $end
$scope module HA_2 $end
$var wire 1 P+ A $end
$var wire 1 Q+ B $end
$var wire 1 R+ Cout $end
$var wire 1 S+ Sum $end
$upscope $end
$scope module iCAC_7 $end
$var wire 11 T+ D1 [10:0] $end
$var wire 11 U+ D2 [10:0] $end
$var wire 15 V+ Q [14:0] $end
$var wire 15 W+ P [14:0] $end
$var wire 15 X+ D2_Shifted [14:0] $end
$var parameter 32 Y+ SHIFT_BITS $end
$var parameter 32 Z+ WIDTH $end
$upscope $end
$upscope $end
$scope module MS3 $end
$var wire 15 [+ CarrySignal [14:0] $end
$var wire 7 \+ Er [6:0] $end
$var wire 15 ]+ SumSignal [14:0] $end
$var wire 9 ^+ inter_Carry [13:5] $end
$var wire 16 _+ Result [15:0] $end
$scope module ECA_FA_1 $end
$var wire 1 `+ A $end
$var wire 1 a+ B $end
$var wire 1 b+ Cin $end
$var wire 1 c+ Cout $end
$var wire 1 d+ Er $end
$var wire 1 e+ Sum $end
$upscope $end
$scope module ECA_FA_2 $end
$var wire 1 f+ A $end
$var wire 1 g+ B $end
$var wire 1 h+ Cin $end
$var wire 1 i+ Cout $end
$var wire 1 j+ Er $end
$var wire 1 k+ Sum $end
$upscope $end
$scope module ECA_FA_3 $end
$var wire 1 l+ A $end
$var wire 1 m+ B $end
$var wire 1 n+ Cin $end
$var wire 1 o+ Cout $end
$var wire 1 p+ Er $end
$var wire 1 q+ Sum $end
$upscope $end
$scope module ECA_FA_4 $end
$var wire 1 r+ A $end
$var wire 1 s+ B $end
$var wire 1 t+ Cin $end
$var wire 1 u+ Cout $end
$var wire 1 v+ Er $end
$var wire 1 w+ Sum $end
$upscope $end
$scope module ECA_FA_5 $end
$var wire 1 x+ A $end
$var wire 1 y+ B $end
$var wire 1 z+ Cin $end
$var wire 1 {+ Cout $end
$var wire 1 |+ Er $end
$var wire 1 }+ Sum $end
$upscope $end
$scope module ECA_FA_6 $end
$var wire 1 ~+ A $end
$var wire 1 !, B $end
$var wire 1 ", Cin $end
$var wire 1 #, Cout $end
$var wire 1 $, Er $end
$var wire 1 %, Sum $end
$upscope $end
$scope module ECA_FA_7 $end
$var wire 1 &, A $end
$var wire 1 ', B $end
$var wire 1 (, Cin $end
$var wire 1 ), Cout $end
$var wire 1 *, Er $end
$var wire 1 +, Sum $end
$upscope $end
$scope module FA_12 $end
$var wire 1 ,, A $end
$var wire 1 -, B $end
$var wire 1 ., Cin $end
$var wire 1 /, Cout $end
$var wire 1 0, Sum $end
$upscope $end
$scope module FA_13 $end
$var wire 1 1, A $end
$var wire 1 2, B $end
$var wire 1 3, Cin $end
$var wire 1 4, Cout $end
$var wire 1 5, Sum $end
$upscope $end
$scope module FA_14 $end
$var wire 1 6, A $end
$var wire 1 7, B $end
$var wire 1 8, Cin $end
$var wire 1 9, Cout $end
$var wire 1 :, Sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1011 Z+
b100 Y+
b1000 i*
b1 h*
b1000 b*
b1 a*
b1000 [*
b1 Z*
b1000 T*
b1 S*
b1001 <*
b10 ;*
b1001 5*
b10 4*
b1000 %*
b111 $*
b110 #*
b101 "*
b100 !*
b11 ~)
b10 })
b1 |)
b0 W)
b1011 r(
b100 q(
b1000 #(
b1 "(
b1000 z'
b1 y'
b1000 s'
b1 r'
b1000 l'
b1 k'
b1001 T'
b10 S'
b1001 M'
b10 L'
b1000 ='
b111 <'
b110 ;'
b101 :'
b100 9'
b11 8'
b10 7'
b1 6'
b0 o&
b1011 ,&
b100 +&
b1000 ;%
b1 :%
b1000 4%
b1 3%
b1000 -%
b1 ,%
b1000 &%
b1 %%
b1001 l$
b10 k$
b1001 e$
b10 d$
b1000 U$
b111 T$
b110 S$
b101 R$
b100 Q$
b11 P$
b10 O$
b1 N$
b0 )$
b1011 D#
b100 C#
b1000 S"
b1 R"
b1000 L"
b1 K"
b1000 E"
b1 D"
b1000 >"
b1 ="
b1001 &"
b10 %"
b1001 }
b10 |
b1000 m
b111 l
b110 k
b101 j
b100 i
b11 h
b10 g
b1 f
b0 A
$end
#0
$dumpvars
x:,
x9,
x8,
x7,
x6,
x5,
x4,
x3,
x2,
x1,
x0,
x/,
x.,
x-,
x,,
x+,
x*,
x),
x(,
x',
x&,
x%,
x$,
x#,
x",
x!,
x~+
x}+
x|+
x{+
xz+
xy+
xx+
xw+
xv+
xu+
xt+
xs+
xr+
xq+
xp+
xo+
xn+
xm+
xl+
xk+
xj+
xi+
xh+
xg+
xf+
xe+
xd+
xc+
0b+
xa+
x`+
bx _+
bx ^+
bx ]+
bx \+
bx00 [+
bx0000 X+
bx W+
b0xxxxxxx0000 V+
bx U+
bx T+
xS+
xR+
xQ+
xP+
xO+
xN+
xM+
xL+
xK+
xJ+
xI+
xH+
xG+
xF+
xE+
xD+
xC+
xB+
xA+
x@+
x?+
x>+
x=+
x<+
x;+
x:+
x9+
x8+
x7+
x6+
x5+
x4+
x3+
x2+
x1+
x0+
x/+
x.+
x-+
x,+
x++
x*+
x)+
x(+
x'+
x&+
x%+
x$+
x#+
x"+
x!+
x~*
x}*
x|*
x{*
xz*
xy*
xx*
xw*
xv*
xu*
xt*
xs*
bx00 r*
bx q*
b0xxxxxxx0000 p*
bx o*
bx00 n*
bx0 m*
bx l*
bx k*
bx j*
bx g*
bx f*
bx0 e*
bx d*
b0xxxxxxx0 c*
bx `*
bx _*
bx0 ^*
bx ]*
b0xxxxxxx0 \*
bx Y*
bx X*
bx0 W*
bx V*
b0xxxxxxx0 U*
bx R*
bx Q*
bx0 P*
bx O*
b0xxxxxxx0 N*
bx M*
bx L*
bx K*
bx J*
bx I*
bx H*
bx G*
bx F*
bx E*
bx D*
bx C*
bx B*
b0xxxxxxx0 A*
b0xxxxxxx0 @*
b0xxxxxxx0 ?*
b0xxxxxxx0 >*
b0xxxxxxxxxxxxx0 =*
bx :*
bx 9*
bx00 8*
bx 7*
b0xxxxxxx00 6*
bx 3*
bx 2*
bx00 1*
bx 0*
b0xxxxxxx00 /*
bx .*
bx -*
bx ,*
bx +*
bx **
bx )*
b0xxxxxxx00 (*
b0xxxxxxx00 '*
b0xxxxxxxxxxx00 &*
bx {)
bx z)
bx y)
bx x)
bx w)
bx v)
b0xxxxxxxxxxxxx0 u)
b0xxxxxxxxxxx00 t)
bx s)
bx r)
bx00 q)
bx0 p)
bx o)
bx n)
bx m)
bx00 l)
bx00 k)
bx j)
bx i)
bx h)
bx g)
b0xxxxxxxxxxxxx0 f)
b0xxxxxxxxxxx00 e)
bx d)
bx c)
bx b)
bx a)
bx `)
bx _)
bx ^)
bx ])
bx \)
bx [)
bx Z)
bx Y)
xX)
bx V)
bx U)
bx T)
bx S)
xR)
xQ)
xP)
xO)
xN)
xM)
xL)
xK)
xJ)
xI)
xH)
xG)
xF)
xE)
xD)
xC)
1B)
xA)
x@)
x?)
x>)
x=)
1<)
x;)
x:)
x9)
x8)
x7)
16)
x5)
x4)
x3)
x2)
x1)
10)
x/)
x.)
x-)
x,)
x+)
1*)
x))
x()
x')
x&)
x%)
1$)
x#)
x")
x!)
x~(
x}(
1|(
x{(
0z(
xy(
xx(
bx w(
bx v(
bx u(
b1111111 t(
bx00 s(
bx0000 p(
bx o(
b0xxxxxxx0000 n(
bx m(
bx l(
xk(
xj(
xi(
xh(
xg(
xf(
xe(
xd(
xc(
xb(
xa(
x`(
x_(
x^(
x](
x\(
x[(
xZ(
xY(
xX(
xW(
xV(
xU(
xT(
xS(
xR(
xQ(
xP(
xO(
xN(
xM(
xL(
xK(
xJ(
xI(
xH(
xG(
xF(
xE(
xD(
xC(
xB(
xA(
x@(
x?(
x>(
x=(
x<(
x;(
x:(
x9(
x8(
x7(
x6(
x5(
x4(
x3(
x2(
x1(
x0(
x/(
x.(
x-(
bx00 ,(
bx +(
b0xxxxxxx0000 *(
bx )(
bx00 ((
bx0 '(
bx &(
bx %(
bx $(
bx !(
bx ~'
bx0 }'
bx |'
b0xxxxxxx0 {'
bx x'
bx w'
bx0 v'
bx u'
b0xxxxxxx0 t'
bx q'
bx p'
bx0 o'
bx n'
b0xxxxxxx0 m'
bx j'
bx i'
bx0 h'
bx g'
b0xxxxxxx0 f'
bx e'
bx d'
bx c'
bx b'
bx a'
bx `'
bx _'
bx ^'
bx ]'
bx \'
bx ['
bx Z'
b0xxxxxxx0 Y'
b0xxxxxxx0 X'
b0xxxxxxx0 W'
b0xxxxxxx0 V'
b0xxxxxxxxxxxxx0 U'
bx R'
bx Q'
bx00 P'
bx O'
b0xxxxxxx00 N'
bx K'
bx J'
bx00 I'
bx H'
b0xxxxxxx00 G'
bx F'
bx E'
bx D'
bx C'
bx B'
bx A'
b0xxxxxxx00 @'
b0xxxxxxx00 ?'
b0xxxxxxxxxxx00 >'
bx 5'
bx 4'
bx 3'
bx 2'
bx 1'
bx 0'
b0xxxxxxxxxxxxx0 /'
b0xxxxxxxxxxx00 .'
bx -'
bx ,'
bx00 +'
bx0 *'
bx )'
bx ('
bx ''
bx00 &'
bx00 %'
bx $'
bx #'
bx "'
bx !'
b0xxxxxxxxxxxxx0 ~&
b0xxxxxxxxxxx00 }&
bx |&
bx {&
b1111111 z&
bx y&
bx x&
bx w&
bx v&
bx u&
bx t&
bx s&
bx r&
bx q&
xp&
bx n&
bx m&
bx l&
b1111111 k&
xj&
xi&
xh&
xg&
xf&
xe&
xd&
xc&
xb&
xa&
x`&
x_&
x^&
x]&
x\&
x[&
1Z&
xY&
xX&
xW&
xV&
xU&
1T&
xS&
xR&
xQ&
xP&
xO&
1N&
xM&
xL&
xK&
xJ&
xI&
1H&
xG&
xF&
xE&
xD&
xC&
1B&
xA&
x@&
x?&
x>&
x=&
1<&
x;&
x:&
x9&
x8&
x7&
16&
x5&
04&
x3&
x2&
bx 1&
bx 0&
bx /&
b1111111 .&
bx00 -&
bx0000 *&
bx )&
b0xxxxxxx0000 (&
bx '&
bx &&
x%&
x$&
x#&
x"&
x!&
x~%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
xo%
xn%
xm%
xl%
xk%
xj%
xi%
xh%
xg%
xf%
xe%
xd%
xc%
xb%
xa%
x`%
x_%
x^%
x]%
x\%
x[%
xZ%
xY%
xX%
xW%
xV%
xU%
xT%
xS%
xR%
xQ%
xP%
xO%
xN%
xM%
xL%
xK%
xJ%
xI%
xH%
xG%
xF%
xE%
bx00 D%
bx C%
b0xxxxxxx0000 B%
bx A%
bx00 @%
bx0 ?%
bx >%
bx =%
bx <%
bx 9%
bx 8%
bx0 7%
bx 6%
b0xxxxxxx0 5%
bx 2%
bx 1%
bx0 0%
bx /%
b0xxxxxxx0 .%
bx +%
bx *%
bx0 )%
bx (%
b0xxxxxxx0 '%
bx $%
bx #%
bx0 "%
bx !%
b0xxxxxxx0 ~$
bx }$
bx |$
bx {$
bx z$
bx y$
bx x$
bx w$
bx v$
bx u$
bx t$
bx s$
bx r$
b0xxxxxxx0 q$
b0xxxxxxx0 p$
b0xxxxxxx0 o$
b0xxxxxxx0 n$
b0xxxxxxxxxxxxx0 m$
bx j$
bx i$
bx00 h$
bx g$
b0xxxxxxx00 f$
bx c$
bx b$
bx00 a$
bx `$
b0xxxxxxx00 _$
bx ^$
bx ]$
bx \$
bx [$
bx Z$
bx Y$
b0xxxxxxx00 X$
b0xxxxxxx00 W$
b0xxxxxxxxxxx00 V$
bx M$
bx L$
bx K$
bx J$
bx I$
bx H$
b0xxxxxxxxxxxxx0 G$
b0xxxxxxxxxxx00 F$
bx E$
bx D$
bx00 C$
bx0 B$
bx A$
bx @$
bx ?$
bx00 >$
bx00 =$
bx <$
bx ;$
bx :$
bx 9$
b0xxxxxxxxxxxxx0 8$
b0xxxxxxxxxxx00 7$
bx 6$
bx 5$
b1111111 4$
bx 3$
bx 2$
bx 1$
bx 0$
bx /$
bx .$
bx -$
bx ,$
bx +$
x*$
bx ($
bx '$
bx &$
b1111111 %$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
1r#
xq#
xp#
xo#
xn#
xm#
1l#
xk#
xj#
xi#
xh#
xg#
1f#
xe#
xd#
xc#
xb#
xa#
1`#
x_#
x^#
x]#
x\#
x[#
1Z#
xY#
xX#
xW#
xV#
xU#
1T#
xS#
xR#
xQ#
xP#
xO#
1N#
xM#
0L#
xK#
xJ#
bx I#
bx H#
bx G#
b1111111 F#
bx00 E#
bx0000 B#
bx A#
b0xxxxxxx0000 @#
bx ?#
bx >#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
bx00 \"
bx ["
b0xxxxxxx0000 Z"
bx Y"
bx00 X"
bx0 W"
bx V"
bx U"
bx T"
bx Q"
bx P"
bx0 O"
bx N"
b0xxxxxxx0 M"
bx J"
bx I"
bx0 H"
bx G"
b0xxxxxxx0 F"
bx C"
bx B"
bx0 A"
bx @"
b0xxxxxxx0 ?"
bx <"
bx ;"
bx0 :"
bx 9"
b0xxxxxxx0 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
b0xxxxxxx0 +"
b0xxxxxxx0 *"
b0xxxxxxx0 )"
b0xxxxxxx0 ("
b0xxxxxxxxxxxxx0 '"
bx $"
bx #"
bx00 ""
bx !"
b0xxxxxxx00 ~
bx {
bx z
bx00 y
bx x
b0xxxxxxx00 w
bx v
bx u
bx t
bx s
bx r
bx q
b0xxxxxxx00 p
b0xxxxxxx00 o
b0xxxxxxxxxxx00 n
bx e
bx d
bx c
bx b
bx a
bx `
b0xxxxxxxxxxxxx0 _
b0xxxxxxxxxxx00 ^
bx ]
bx \
bx00 [
bx0 Z
bx Y
bx X
bx W
bx00 V
bx00 U
bx T
bx S
bx R
bx Q
b0xxxxxxxxxxxxx0 P
b0xxxxxxxxxxx00 O
bx N
bx M
b1111111 L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
xB
bx @
bx ?
bx >
b1111111 =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
x3
x2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
0%
bx $
1#
bx "
x!
$end
#10
0#
#20
b0xxxxxxxxxxx00 [
b0xxxxxxxxxxx00 X"
b0xxxxxxxxxxxxx0 Z
b0xxxxxxxxxxxxx0 W"
b0xxxxxxxxxxx00 +'
b0xxxxxxxxxxx00 ((
b0xxxxxxxxxxxxx0 *'
b0xxxxxxxxxxxxx0 '(
b0xxxxxxxxxxx00 C$
b0xxxxxxxxxxx00 @%
b0xxxxxxxxxxxxx0 B$
b0xxxxxxxxxxxxx0 ?%
b0xxxxxxxxxxx00 q)
b0xxxxxxxxxxx00 n*
b0xxxxxxxxxxxxx0 p)
b0xxxxxxxxxxxxx0 m*
1#
#30
0#
#40
1#
#50
0#
#55
13
b0 &
b0 ,
b1 '
b1 -
b110011 (
b110011 .
#60
1#
#70
0#
#80
1#
#90
0#
#100
1#
#110
1d+
1j+
1p+
1v+
1|+
1$,
1*,
b110111 U)
b110111 '$
b0 m&
b0 ?
b111110100 T)
b0 &$
b111110100 l&
b0 >
b1111111 9
b1111111 S)
b1111111 b)
b1111111 \+
b110111 5
b110111 ;
b111110100 4
b111110100 :
b110111 8
b111110100 7
0#
b110111 *
b110111 0
b111110100 )
b111110100 /
b11111111001 $
b11111111001 +
#120
1#
#130
0#
#140
1#
#150
0#
#160
1#
#170
0#
#180
1#
#190
0#
#200
1#
#210
0#
#220
1#
#230
0#
#240
1#
#250
0#
#260
1#
#270
0#
#280
1#
#290
0#
#300
1#
#310
0#
#320
1#
#330
0#
#340
1#
#350
0#
#360
1#
#370
b1101101011000 U)
b1101101011000 '$
b1011101110000 T)
b1011101110000 l&
b1101101011000 5
b1101101011000 ;
b1011101110000 4
b1011101110000 :
b1101101011000 8
b1011101110000 7
0#
b1101101011000 *
b1101101011000 0
b1011101110000 )
b1011101110000 /
#380
1#
#390
0#
#400
1#
#410
0#
#420
1#
#430
0#
#440
1#
#450
0#
#460
1#
#470
0#
#480
1#
#490
0#
#500
1#
#510
0#
#520
1#
#530
0#
#540
1#
#550
0#
#560
1#
#570
0#
