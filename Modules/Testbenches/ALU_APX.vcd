$date
	Thu Oct 05 13:08:06 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module Arithmetic_Logic_Unit_APX_TB $end
$var wire 32 ! alu_output [31:0] $end
$var reg 32 " PC [31:0] $end
$var reg 8 # accuracy_level [7:0] $end
$var reg 3 $ funct3 [2:0] $end
$var reg 7 % funct7 [6:0] $end
$var reg 32 & immediate [31:0] $end
$var reg 7 ' opcode [6:0] $end
$var reg 32 ( rs1 [31:0] $end
$var reg 32 ) rs2 [31:0] $end
$scope module ALU_APX $end
$var wire 32 * PC [31:0] $end
$var wire 8 + accuracy_level [7:0] $end
$var wire 3 , funct3 [2:0] $end
$var wire 7 - funct7 [6:0] $end
$var wire 32 . immediate [31:0] $end
$var wire 7 / opcode [6:0] $end
$var wire 32 0 rs1 [31:0] $end
$var wire 32 1 rs2 [31:0] $end
$var wire 32 2 result [31:0] $end
$var parameter 32 3 APX_ACC_CONTROL $end
$var parameter 32 4 USER_DESIGN $end
$var parameter 32 5 X_EXTENISION $end
$var reg 8 6 accuracy [7:0] $end
$var reg 32 7 alu_output [31:0] $end
$var reg 32 8 input_1 [31:0] $end
$var reg 32 9 input_2 [31:0] $end
$var reg 1 : mux1_select $end
$var reg 2 ; mux2_select [1:0] $end
$var reg 32 < operand_1 [31:0] $end
$var reg 32 = operand_2 [31:0] $end
$scope module adder $end
$var wire 8 > accuracy [7:0] $end
$var wire 32 ? input_1 [31:0] $end
$var wire 32 @ input_2 [31:0] $end
$var reg 32 A output_alu [31:0] $end
$var reg 32 B result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1 5
b1 4
b1 3
$end
#0
$dumpvars
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
x:
bx 9
bx 8
bx 7
bx 6
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#10000
b1001 !
b1001 7
b1001 2
b1001 B
b1001 A
b101 9
b101 @
b100 8
b100 ?
b101 =
b100 <
b0 6
b0 >
b0 ;
0:
b101 )
b101 1
b100 (
b100 0
b0 #
b0 +
b0 %
b0 -
b0 $
b0 ,
b110011 '
b110011 /
#25000
b1000 !
b1000 7
b1000 2
b1000 B
b1000 A
b1 6
b1 >
b1 #
b1 +
#40000
b111 !
b111 7
b111 2
b111 B
b111 A
b10 6
b10 >
b10 #
b10 +
#65000
b111 !
b111 7
b11 9
b11 @
b111 2
b111 B
b111 A
b11 =
b0 6
b0 >
b1 ;
b11 &
b11 .
b0 #
b0 +
b10011 '
b10011 /
#80000
b110 !
b110 7
b110 2
b110 B
b110 A
b1 6
b1 >
b1 #
b1 +
#95000
b101 !
b101 7
b101 2
b101 B
b101 A
b10 6
b10 >
b10 #
b10 +
#120000
b11 !
b11 7
b110 8
b110 ?
b11 2
b11 B
b11 A
b110 <
b0 6
b0 >
b11111111111111111111111111111101 9
b11111111111111111111111111111101 @
b0 ;
b11 )
b11 1
b110 (
b110 0
b0 #
b0 +
b100000 %
b100000 -
b110011 '
b110011 /
#135000
b10 !
b10 7
b10 2
b10 B
b10 A
b1 6
b1 >
b1 #
b1 +
#150000
b1 !
b1 7
b1 2
b1 B
b1 A
b10 6
b10 >
b10 #
b10 +
#165000
